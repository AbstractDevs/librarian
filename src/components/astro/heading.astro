---
import { type VariantProps, cva } from "class-variance-authority";
import type { HTMLAttributes } from "astro/types";
import { match } from "ts-pattern";
import { cn } from "@/utils/cn";

export const headingVariants = cva("antialiased", {
  variants: {
    variant: {
      h1: "text-4xl font-bold tracking-tight",
      h2: "text-3xl font-semibold tracking-tight",
      h3: "text-2xl font-semibold",
      h4: "text-xl font-semibold",
      h5: "text-lg font-semibold",
      h6: "text-base font-semibold",
    },
  },
  defaultVariants: {
    variant: "h1",
  },
});

type HeadingVariants = VariantProps<typeof headingVariants>;
type Variant = NonNullable<HeadingVariants["variant"]>;

export interface Props extends HTMLAttributes<Variant> {
  variant: Variant;
}

const { variant, class: className, ...props } = Astro.props;
---

{
  match(variant)
    .with("h1", () => (
      <h1 {...props} class={cn(headingVariants({ variant, class: className }))}>
        <slot />
      </h1>
    ))
    .with("h2", () => (
      <h2 {...props} class={cn(headingVariants({ variant, class: className }))}>
        <slot />
      </h2>
    ))
    .with("h3", () => (
      <h3 {...props} class={cn(headingVariants({ variant, class: className }))}>
        <slot />
      </h3>
    ))
    .with("h4", () => (
      <h4 {...props} class={cn(headingVariants({ variant, class: className }))}>
        <slot />
      </h4>
    ))
    .with("h5", () => (
      <h5 {...props} class={cn(headingVariants({ variant, class: className }))}>
        <slot />
      </h5>
    ))
    .with("h6", () => (
      <h6 {...props} class={cn(headingVariants({ variant, class: className }))}>
        <slot />
      </h6>
    ))
    .exhaustive()
}

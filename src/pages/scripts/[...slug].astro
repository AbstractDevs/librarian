---
import RenderedMarkdown from "@/components/astro/rendered-markdown.astro";
import Typography from "@/components/astro/typography.astro";
import { ButtonLink } from "@/components/ui/button-link";
import Layout from "@/layouts/Layout.astro";
import { parseScriptData } from "@/utils/script";
import { render, getEntry, getCollection } from "astro:content";
import { ArrowLeftIcon } from "lucide-react";

export async function getStaticPaths() {
  const scripts = await getCollection("scripts");

  return Promise.all(
    scripts.map(async (script) => {
      const [base] = script.id.split("/");

      // TODO: likely a much better way to do this?
      const [changelog, readme] = await Promise.all([
        getEntry("scriptChangelogs", `${base}/changelog`),
        getEntry("scriptReadmes", `${base}/readme`),
      ]);

      return {
        params: { slug: script.id },
        props: { script: parseScriptData(script), changelog, readme },
      };
    }),
  );
}

const { script, changelog, readme } = Astro.props;

const ChangelogContent = changelog ? (await render(changelog)).Content : null;
const ReadmeContent = readme ? (await render(readme)).Content : null;
---

<Layout containerClass="space-y-4">
  <div>
    <ButtonLink variant="link" href="/scripts">
      <ArrowLeftIcon className="size-4" />
      Back to Scripts
    </ButtonLink>
  </div>
  <div class="grid grid-cols-12 gap-4">
    <div class="col-span-8">
      <div class="max-h-[700px] overflow-auto rounded-md border">
        {
          ReadmeContent ? (
            <RenderedMarkdown>
              <ReadmeContent />
            </RenderedMarkdown>
          ) : (
            <Typography class="text-center">TODO: handle empty state for readme</Typography>
          )
        }
      </div>
    </div>
    <div class="col-span-4 rounded-md border">
      <Typography class="text-center">TODO: Image and actions</Typography>
    </div>
  </div>
  <div class="grid grid-cols-12 gap-4">
    <div class="col-span-8">
      <div class="max-h-[700px] overflow-auto rounded-md border">
        {
          ChangelogContent ? (
            <RenderedMarkdown>
              <ChangelogContent />
            </RenderedMarkdown>
          ) : (
            <Typography class="text-center">TODO: handle empty state for changelog</Typography>
          )
        }
      </div>
    </div>
    <div class="col-span-4 rounded-md border">
      <div>
        <Typography class="text-center">TODO: History</Typography>
      </div>
    </div>
  </div>
</Layout>

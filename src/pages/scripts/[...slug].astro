---
import RenderedMarkdown from "@/components/astro/rendered-markdown.astro";
import Typography from "@/components/astro/typography.astro";
import { ButtonLink } from "@/components/ui/button-link";
import { ScriptImageActionButtons } from "@/components/react/script-image-action-buttons";
import { ScriptImageTabs } from "@/components/react/script-image-tabs";
import Layout from "@/layouts/Layout.astro";
import { parseScriptData } from "@/utils/script";
import { render, getEntry, getCollection } from "astro:content";
import { ArrowLeftIcon } from "lucide-react";
import { DownloadScriptJsonButton } from "@/components/react/download-script-json-button";
import { CopyScriptJsonButton } from "@/components/react/copy-script-json-button";

export async function getStaticPaths() {
  const scripts = await getCollection("scripts");

  return Promise.all(
    scripts.map(async (script) => {
      const [base] = script.id.split("/");

      // TODO: likely a much better way to do this?
      const history = scripts
        .filter(({ id }) => id.startsWith(base) && id.includes("/history/"))
        .sort((a, b) => b.id.localeCompare(a.id))
        .map((script) => parseScriptData(script));

      // TODO: likely a much better way to do this?
      const [changelog, readme] = await Promise.all([
        getEntry("scriptChangelogs", `${base}/changelog`),
        getEntry("scriptReadmes", `${base}/readme`),
      ]);

      if (!readme) {
        throw new Error(`Script ${script.id} must contain a README`);
      }

      return {
        params: { slug: script.id },
        props: { script: parseScriptData(script), changelog, readme, history },
      };
    }),
  );
}

const { script, changelog, readme, history } = Astro.props;

const ChangelogContent = changelog ? (await render(changelog)).Content : null;
const { Content: ReadmeContent } = await render(readme);

const isReadmeEmpty = !readme.rendered || readme.rendered?.html === "";
---

<Layout containerClass="space-y-4">
  <div>
    <ButtonLink variant="link" href="/scripts">
      <ArrowLeftIcon className="size-4" />
      Back to Scripts
    </ButtonLink>
  </div>
  <div class="grid grid-cols-1 gap-4 md:grid-cols-12">
    <div class="order-2 col-auto md:order-none md:col-span-8">
      <div class="max-h-[700px] space-y-8 overflow-auto rounded-md border p-6">
        <Typography variant="h2">Overview</Typography>
        <div class="mt-4">
          {
            !isReadmeEmpty ? (
              <RenderedMarkdown>
                <ReadmeContent />
              </RenderedMarkdown>
            ) : (
              <Typography variant="caption-lg" class="text-center">
                No overview for this script
              </Typography>
            )
          }
        </div>
      </div>
    </div>
    <div class="order-1 col-auto rounded-md border md:order-none md:col-span-4">
      {
        readme?.data.frontImage && readme?.data.backImage && (
          <div>
            <ScriptImageTabs
              client:load
              frontImage={{
                src: readme.data.frontImage.src,
                height: readme.data.frontImage.height,
                width: readme.data.frontImage.width,
              }}
              backImage={{
                src: readme.data.backImage.src,
                height: readme.data.backImage.height,
                width: readme.data.backImage.width,
              }}
            />
          </div>
        )
      }
      <div class="my-4 flex justify-center">
        <ScriptImageActionButtons
          client:load
          script={script}
          frontImageSrc={readme?.data.frontImage?.src}
          backImageSrc={readme?.data.backImage?.src}
        />
      </div>
    </div>
  </div>
  <div class="grid grid-cols-1 gap-4 md:grid-cols-12">
    <div class="col-auto md:order-none md:col-span-8">
      <div class="max-h-[700px] space-y-8 overflow-auto rounded-md border p-6">
        <Typography variant="h2">Changelog</Typography>
        {
          ChangelogContent ? (
            <div class="mt-4">
              <RenderedMarkdown>
                <ChangelogContent />
              </RenderedMarkdown>
            </div>
          ) : (
            <Typography variant="caption-lg" class="text-center">
              No changelog for this script
            </Typography>
          )
        }
      </div>
    </div>
    <div class="order-1 col-auto space-y-8 rounded-md border p-6 md:col-span-4">
      <Typography variant="h2">History</Typography>
      <div class="flex flex-col gap-4">
        {
          history.length === 0 && (
            <Typography variant="caption-lg" class="text-center">
              No past versions of this script
            </Typography>
          )
        }
        {
          history.map(({ id }) => (
            <div class="flex items-center justify-between">
              <div class="flex-1">
                <Typography variant="body-lg">{id.substring(id.lastIndexOf("/") + 1)}</Typography>
              </div>
              <div class="flex items-center gap-2">
                <CopyScriptJsonButton
                  client:load
                  jsonString={script.scriptJsonString}
                  size="icon"
                />
                <DownloadScriptJsonButton
                  client:load
                  jsonString={script.scriptJsonString}
                  scriptId={id}
                  size="icon"
                />
              </div>
            </div>
          ))
        }
      </div>
    </div>
  </div>
</Layout>
